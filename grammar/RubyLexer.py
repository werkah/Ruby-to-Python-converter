# Generated from C:\Users\wehil\PycharmProjects\Ruby-to-Python-converter\grammar\Ruby.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,61,391,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,3,27,228,8,27,1,27,1,27,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,
        1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,
        1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,
        1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,4,60,386,
        8,60,11,60,12,60,387,1,60,1,60,0,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
        121,61,1,0,1,2,0,9,9,32,32,392,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
        0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,
        3,126,1,0,0,0,5,132,1,0,0,0,7,137,1,0,0,0,9,141,1,0,0,0,11,148,1,
        0,0,0,13,151,1,0,0,0,15,157,1,0,0,0,17,163,1,0,0,0,19,169,1,0,0,
        0,21,173,1,0,0,0,23,176,1,0,0,0,25,180,1,0,0,0,27,187,1,0,0,0,29,
        191,1,0,0,0,31,194,1,0,0,0,33,199,1,0,0,0,35,205,1,0,0,0,37,207,
        1,0,0,0,39,210,1,0,0,0,41,212,1,0,0,0,43,214,1,0,0,0,45,216,1,0,
        0,0,47,218,1,0,0,0,49,220,1,0,0,0,51,222,1,0,0,0,53,224,1,0,0,0,
        55,227,1,0,0,0,57,231,1,0,0,0,59,233,1,0,0,0,61,236,1,0,0,0,63,239,
        1,0,0,0,65,242,1,0,0,0,67,245,1,0,0,0,69,248,1,0,0,0,71,252,1,0,
        0,0,73,254,1,0,0,0,75,256,1,0,0,0,77,258,1,0,0,0,79,260,1,0,0,0,
        81,262,1,0,0,0,83,265,1,0,0,0,85,268,1,0,0,0,87,271,1,0,0,0,89,273,
        1,0,0,0,91,275,1,0,0,0,93,278,1,0,0,0,95,281,1,0,0,0,97,285,1,0,
        0,0,99,288,1,0,0,0,101,291,1,0,0,0,103,295,1,0,0,0,105,297,1,0,0,
        0,107,299,1,0,0,0,109,322,1,0,0,0,111,349,1,0,0,0,113,363,1,0,0,
        0,115,369,1,0,0,0,117,374,1,0,0,0,119,378,1,0,0,0,121,385,1,0,0,
        0,123,124,5,105,0,0,124,125,5,102,0,0,125,2,1,0,0,0,126,127,5,101,
        0,0,127,128,5,108,0,0,128,129,5,115,0,0,129,130,5,105,0,0,130,131,
        5,102,0,0,131,4,1,0,0,0,132,133,5,101,0,0,133,134,5,108,0,0,134,
        135,5,115,0,0,135,136,5,101,0,0,136,6,1,0,0,0,137,138,5,101,0,0,
        138,139,5,110,0,0,139,140,5,100,0,0,140,8,1,0,0,0,141,142,5,117,
        0,0,142,143,5,110,0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,146,
        5,115,0,0,146,147,5,115,0,0,147,10,1,0,0,0,148,149,5,100,0,0,149,
        150,5,111,0,0,150,12,1,0,0,0,151,152,5,119,0,0,152,153,5,104,0,0,
        153,154,5,105,0,0,154,155,5,108,0,0,155,156,5,101,0,0,156,14,1,0,
        0,0,157,158,5,98,0,0,158,159,5,101,0,0,159,160,5,103,0,0,160,161,
        5,105,0,0,161,162,5,110,0,0,162,16,1,0,0,0,163,164,5,117,0,0,164,
        165,5,110,0,0,165,166,5,116,0,0,166,167,5,105,0,0,167,168,5,108,
        0,0,168,18,1,0,0,0,169,170,5,102,0,0,170,171,5,111,0,0,171,172,5,
        114,0,0,172,20,1,0,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,22,
        1,0,0,0,176,177,5,100,0,0,177,178,5,101,0,0,178,179,5,102,0,0,179,
        24,1,0,0,0,180,181,5,114,0,0,181,182,5,101,0,0,182,183,5,116,0,0,
        183,184,5,117,0,0,184,185,5,114,0,0,185,186,5,110,0,0,186,26,1,0,
        0,0,187,188,5,97,0,0,188,189,5,110,0,0,189,190,5,100,0,0,190,28,
        1,0,0,0,191,192,5,111,0,0,192,193,5,114,0,0,193,30,1,0,0,0,194,195,
        5,116,0,0,195,196,5,114,0,0,196,197,5,117,0,0,197,198,5,101,0,0,
        198,32,1,0,0,0,199,200,5,102,0,0,200,201,5,97,0,0,201,202,5,108,
        0,0,202,203,5,115,0,0,203,204,5,101,0,0,204,34,1,0,0,0,205,206,5,
        64,0,0,206,36,1,0,0,0,207,208,5,64,0,0,208,209,5,64,0,0,209,38,1,
        0,0,0,210,211,5,36,0,0,211,40,1,0,0,0,212,213,5,35,0,0,213,42,1,
        0,0,0,214,215,5,39,0,0,215,44,1,0,0,0,216,217,5,40,0,0,217,46,1,
        0,0,0,218,219,5,41,0,0,219,48,1,0,0,0,220,221,5,91,0,0,221,50,1,
        0,0,0,222,223,5,93,0,0,223,52,1,0,0,0,224,225,5,44,0,0,225,54,1,
        0,0,0,226,228,5,13,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,229,1,
        0,0,0,229,230,5,10,0,0,230,56,1,0,0,0,231,232,5,59,0,0,232,58,1,
        0,0,0,233,234,5,43,0,0,234,235,5,61,0,0,235,60,1,0,0,0,236,237,5,
        45,0,0,237,238,5,61,0,0,238,62,1,0,0,0,239,240,5,42,0,0,240,241,
        5,61,0,0,241,64,1,0,0,0,242,243,5,47,0,0,243,244,5,61,0,0,244,66,
        1,0,0,0,245,246,5,37,0,0,246,247,5,61,0,0,247,68,1,0,0,0,248,249,
        5,42,0,0,249,250,5,42,0,0,250,251,5,61,0,0,251,70,1,0,0,0,252,253,
        5,43,0,0,253,72,1,0,0,0,254,255,5,45,0,0,255,74,1,0,0,0,256,257,
        5,42,0,0,257,76,1,0,0,0,258,259,5,47,0,0,259,78,1,0,0,0,260,261,
        5,37,0,0,261,80,1,0,0,0,262,263,5,42,0,0,263,264,5,42,0,0,264,82,
        1,0,0,0,265,266,5,43,0,0,266,267,5,43,0,0,267,84,1,0,0,0,268,269,
        5,45,0,0,269,270,5,45,0,0,270,86,1,0,0,0,271,272,5,62,0,0,272,88,
        1,0,0,0,273,274,5,60,0,0,274,90,1,0,0,0,275,276,5,60,0,0,276,277,
        5,61,0,0,277,92,1,0,0,0,278,279,5,62,0,0,279,280,5,61,0,0,280,94,
        1,0,0,0,281,282,5,60,0,0,282,283,5,61,0,0,283,284,5,62,0,0,284,96,
        1,0,0,0,285,286,5,61,0,0,286,287,5,61,0,0,287,98,1,0,0,0,288,289,
        5,33,0,0,289,290,5,61,0,0,290,100,1,0,0,0,291,292,5,61,0,0,292,293,
        5,61,0,0,293,294,5,61,0,0,294,102,1,0,0,0,295,296,5,61,0,0,296,104,
        1,0,0,0,297,298,5,46,0,0,298,106,1,0,0,0,299,300,5,91,0,0,300,301,
        5,97,0,0,301,302,5,45,0,0,302,303,5,122,0,0,303,304,5,65,0,0,304,
        305,5,45,0,0,305,306,5,90,0,0,306,307,5,95,0,0,307,308,5,93,0,0,
        308,309,5,91,0,0,309,310,5,97,0,0,310,311,5,45,0,0,311,312,5,122,
        0,0,312,313,5,65,0,0,313,314,5,45,0,0,314,315,5,90,0,0,315,316,5,
        48,0,0,316,317,5,45,0,0,317,318,5,57,0,0,318,319,5,95,0,0,319,320,
        5,93,0,0,320,321,5,42,0,0,321,108,1,0,0,0,322,323,5,91,0,0,323,324,
        5,48,0,0,324,325,5,45,0,0,325,326,5,57,0,0,326,327,5,93,0,0,327,
        328,5,43,0,0,328,329,5,124,0,0,329,330,5,40,0,0,330,331,5,91,0,0,
        331,332,5,48,0,0,332,333,5,45,0,0,333,334,5,57,0,0,334,335,5,93,
        0,0,335,336,5,42,0,0,336,337,5,32,0,0,337,338,5,68,0,0,338,339,5,
        79,0,0,339,340,5,84,0,0,340,341,5,32,0,0,341,342,5,91,0,0,342,343,
        5,48,0,0,343,344,5,45,0,0,344,345,5,57,0,0,345,346,5,93,0,0,346,
        347,5,43,0,0,347,348,5,41,0,0,348,110,1,0,0,0,349,350,5,91,0,0,350,
        351,5,97,0,0,351,352,5,45,0,0,352,353,5,122,0,0,353,354,5,65,0,0,
        354,355,5,45,0,0,355,356,5,90,0,0,356,357,5,48,0,0,357,358,5,45,
        0,0,358,359,5,57,0,0,359,360,5,95,0,0,360,361,5,93,0,0,361,362,5,
        42,0,0,362,112,1,0,0,0,363,364,5,91,0,0,364,365,5,94,0,0,365,366,
        5,10,0,0,366,367,5,93,0,0,367,368,5,42,0,0,368,114,1,0,0,0,369,370,
        5,112,0,0,370,371,5,117,0,0,371,372,5,116,0,0,372,373,5,115,0,0,
        373,116,1,0,0,0,374,375,5,110,0,0,375,376,5,101,0,0,376,377,5,119,
        0,0,377,118,1,0,0,0,378,379,5,99,0,0,379,380,5,108,0,0,380,381,5,
        97,0,0,381,382,5,115,0,0,382,383,5,115,0,0,383,120,1,0,0,0,384,386,
        7,0,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,385,1,0,0,0,387,388,
        1,0,0,0,388,389,1,0,0,0,389,390,6,60,0,0,390,122,1,0,0,0,3,0,227,
        387,1,6,0,0
    ]

class RubyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSIF = 2
    ELSE = 3
    END = 4
    UNLESS = 5
    DO = 6
    WHILE = 7
    BEGIN = 8
    UNTIL = 9
    FOR = 10
    IN = 11
    DEF = 12
    RETURN = 13
    AND = 14
    OR = 15
    TRUE = 16
    FALSE = 17
    AT = 18
    ATAT = 19
    DOLLAR = 20
    HASH = 21
    APOSTROPHE = 22
    LEFTPAREN = 23
    RIGHTPAREN = 24
    LEFTBRACKET = 25
    RIGTHBRACKET = 26
    COMMA = 27
    NEWLINE = 28
    SEMICOLON = 29
    PLUSEQUAL = 30
    MINUSEQUAL = 31
    MULEQUAL = 32
    DIVIDEEQUAL = 33
    MODEQUAL = 34
    MULMULEQUAL = 35
    PLUS = 36
    MINUS = 37
    MUL = 38
    DIVIDE = 39
    MOD = 40
    MULMUL = 41
    PLUSPLUS = 42
    MINUSMINUS = 43
    GREATER = 44
    LESS = 45
    LESSEQUAL = 46
    MOREEQUAL = 47
    LESSEQUALMORE = 48
    EQUALEQUAL = 49
    NOTEQUAL = 50
    EQUALEQUALEQUAL = 51
    EQUAL = 52
    DOT = 53
    ID = 54
    NUMBER = 55
    STRING = 56
    COMMENT = 57
    PUTS = 58
    NEW = 59
    CLASS = 60
    WHITE_SPACE = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'elsif'", "'else'", "'end'", "'unless'", "'do'", "'while'", 
            "'begin'", "'until'", "'for'", "'in'", "'def'", "'return'", 
            "'and'", "'or'", "'true'", "'false'", "'@'", "'@@'", "'$'", 
            "'#'", "'''", "'('", "')'", "'['", "']'", "','", "';'", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "'**='", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'**'", "'++'", "'--'", "'>'", "'<'", "'<='", 
            "'>='", "'<=>'", "'=='", "'!='", "'==='", "'='", "'.'", "'[a-zA-Z_][a-zA-Z0-9_]*'", 
            "'[0-9]+|([0-9]* DOT [0-9]+)'", "'[a-zA-Z0-9_]*'", "'[^\\n]*'", 
            "'puts'", "'new'", "'class'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSIF", "ELSE", "END", "UNLESS", "DO", "WHILE", "BEGIN", 
            "UNTIL", "FOR", "IN", "DEF", "RETURN", "AND", "OR", "TRUE", 
            "FALSE", "AT", "ATAT", "DOLLAR", "HASH", "APOSTROPHE", "LEFTPAREN", 
            "RIGHTPAREN", "LEFTBRACKET", "RIGTHBRACKET", "COMMA", "NEWLINE", 
            "SEMICOLON", "PLUSEQUAL", "MINUSEQUAL", "MULEQUAL", "DIVIDEEQUAL", 
            "MODEQUAL", "MULMULEQUAL", "PLUS", "MINUS", "MUL", "DIVIDE", 
            "MOD", "MULMUL", "PLUSPLUS", "MINUSMINUS", "GREATER", "LESS", 
            "LESSEQUAL", "MOREEQUAL", "LESSEQUALMORE", "EQUALEQUAL", "NOTEQUAL", 
            "EQUALEQUALEQUAL", "EQUAL", "DOT", "ID", "NUMBER", "STRING", 
            "COMMENT", "PUTS", "NEW", "CLASS", "WHITE_SPACE" ]

    ruleNames = [ "IF", "ELSIF", "ELSE", "END", "UNLESS", "DO", "WHILE", 
                  "BEGIN", "UNTIL", "FOR", "IN", "DEF", "RETURN", "AND", 
                  "OR", "TRUE", "FALSE", "AT", "ATAT", "DOLLAR", "HASH", 
                  "APOSTROPHE", "LEFTPAREN", "RIGHTPAREN", "LEFTBRACKET", 
                  "RIGTHBRACKET", "COMMA", "NEWLINE", "SEMICOLON", "PLUSEQUAL", 
                  "MINUSEQUAL", "MULEQUAL", "DIVIDEEQUAL", "MODEQUAL", "MULMULEQUAL", 
                  "PLUS", "MINUS", "MUL", "DIVIDE", "MOD", "MULMUL", "PLUSPLUS", 
                  "MINUSMINUS", "GREATER", "LESS", "LESSEQUAL", "MOREEQUAL", 
                  "LESSEQUALMORE", "EQUALEQUAL", "NOTEQUAL", "EQUALEQUALEQUAL", 
                  "EQUAL", "DOT", "ID", "NUMBER", "STRING", "COMMENT", "PUTS", 
                  "NEW", "CLASS", "WHITE_SPACE" ]

    grammarFileName = "Ruby.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


